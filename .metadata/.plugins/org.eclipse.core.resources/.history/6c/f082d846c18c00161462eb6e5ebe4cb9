
public class List{

	public Node last=null;
	public Node first=null;
	
	public List() {
		super();
	}
	
	public void insertNode(Object object){
		Node newNode = new Node(object);
		newNode.link = null;
		
		// Check if list is empty
		if (first == null){
			first = newNode;
			last =newNode;
		}
		else {
			last.link = newNode;
			last=newNode;
		}
	}
	
	//display the linked list
	public String toString(){
		Node current = first;
		String print = "";
		while (current!=null){
			print= print+current.object.toString()+"\n";
			current = current.link;
		}
		return print;
	}
	
	//delete node
	public void deleteNode(String keyName, int key) throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException, SecurityException {
		Node previous = first;
		Node current = first;
		// is the list empty
		if (current == null){
			System.out.println("Empty list");
			return;
		}
		
		if (this.first.getClass().getField("ID") != null){
			while (current != null){
				if (current.object.getClass().getField(keyName).getInt(current.object) == key){
					previous.link = current.link;
				}
				previous = current;
				current = current.link;
			}
		}
		else{
			System.out.println("No such key exists");
		}

	}
	
	public Object findNode(String keyName, int key) throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException, SecurityException{
		Node current = first;
		if (this.first.getClass().getField("ID") != null){
			while (current != null){
				if (current.object.getClass().getField(keyName).getInt(current.object) == key){
					return current.object;
				}

			}
		}
		else{
			System.out.println("No such key exists");
		}
		return null;
	}
	
//	private static Node pointLink(Node beginning, Node next, int count, Node target, int targetCount){
//		if (count == targetCount){
//			next = beginning.link;
//			count--;
//			beginning.link = next;
//			return pointLink(beginning, next, count, target, targetCount);
//		} else {
//			if (count == 0){
//				next = next.link.link; // target = current.link
//				return next;
//			}
//			Node nextNext = next.link;
//			count--;
//			return pointLink(beginning, nextNext, count, target, targetCount);
//		}
//	}
	
	
}
