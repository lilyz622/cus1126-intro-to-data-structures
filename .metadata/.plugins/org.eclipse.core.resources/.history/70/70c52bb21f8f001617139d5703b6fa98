import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * @author yzhan265
 *
 */
public class InsertionSortingArrays {
	private final static int RANDOM_RANGE = 100000;	

	public static void main(String[] args) throws InterruptedException{	
		
		System.out.println("We create arrays of random integers of varing lengths and merge sort them.\n");
		for (int i = 1; i <=5; i++){
			int arrayLength = (int) Math.pow(10, i);
			int[] randomArray = createRandomArray(arrayLength);
			System.out.println("Length "+arrayLength+":"+Arrays.toString(randomArray));
			System.out.println("Sorted array:"+Arrays.toString(insertionSortHelp(randomArray))+"\n");
			
		}
		
	}
	
	public static int[] insertionSortHelp(int[] input) {
		long startTime = System.nanoTime();
		insertionSort(input);
		long estimatedTime = System.nanoTime() - startTime;
		System.out.println("Estimated time to merge sort array of length "+input.length+" is:"+estimatedTime); 
		return input;
	}
	
	/**
	 * Creates an array of random integers of size length
	 * @param length size of array
	 * @return random array of int
	 */
	public static int[] createRandomArray(int length){
		int[] output = new int[length];
		for(int i = 0; i< output.length; i++){
			output[i]= (int)(Math.random()*RANDOM_RANGE)+1;
		}
		return output;
	}
	
	/**
	 * insertionSort algorithm sorts and times the sorting, and adds this information to the records
	 * @param ar integers
	 */
	
	public static void insertionSort(int[] input)
	{
		
		 for (int i = 1; i < input.length ; i++)
		 {
			 int index = input[i];
			 int j = i;
			 while(j>0 && input[j-1]>index)
			 {
				 input[j] = input[j-1];
				 j--;
			 }
			 input[j] = index;
		 }
		 
	}

}

/*
2463, 
6979, 
65685, 
520962, 
4444393, */